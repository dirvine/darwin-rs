initSidebarItems({"mod":[["all_any","Whether all or any of the elements in a `Spliterator` fulfill a predicate."],["collect","Collect Spliterators into collections."],["fold","Fold or reduce the items of a `Spliterator` into one."]],"struct":[["Cloned",""],["CostMul","A cost multiplier. See the docs of `Split::with_cost_mul` for more."],["Enumerate","Enumerate iterator adapter"],["Filter","Filter ilterator adapter."],["FlatMap","Flat Mapping iterator adapter."],["Hide","Used to mask data so that implementations don't conflict."],["Map","Map iterator adapter."],["SliceSplit","A split iterator over an immutable slice."],["SliceSplitMut","A split iterator over a mutable slice."],["Zip","Zip iterator adapter."]],"trait":[["BorrowSpliterator","Things that can have a `Spliterator` borrowed from them."],["BorrowSpliteratorMut","Things that can have a `Spliterator` borrowed mutably from them."],["Callback","A callback which takes an iterator of the given item type, processes it, and produces a result."],["Consumer","A consumer takes an `IntoIterator`, which is usually the `Base` of a `Spliterator`, produces the desired iterator, and passes it to the callback given."],["ExactSizeSpliterator","An iterator for which the exact number of elements is known."],["IntoSpliterator","Things that can be turned into a `Spliterator`."],["Split","Data which can be split in two at an index."],["Spliterator","A parallel iterator which works by splitting the underlying data and sharing it between threads."]]});